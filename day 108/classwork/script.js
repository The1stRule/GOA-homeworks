
// ამ მისამართზე გააგზავნეთ მოთხოვნა  fetch ფუნქციის დახმარებით, ახსენით რას აკეთებს ეს ფუნქცია, შემდეგ დაბეჭდეთ
// პირდაპირ დაბრუნებული დაპირება კონსოლში, ახსენით რა არის დაპირება რეალური ცხვორების მაგალითიდ,
// როცა დაპირება დამყარდება გამოიყენეთ then და  catch ფუნქციები და ახსენით მათი დანიშნულება,
// აგრეთვე ახსენით რა არის  json და რატომ არის json მეთოდი ასინქრონიზირებული

// დავუშვათ შენ ხარ ცნობილი მომღერალი, რომელსაც არ ასვენებენ ფანები, დღე და ღამე გეკითხებიან, თუ როდის გამოვა ახალი სიმღერა
// რომ ამოისუნთქო, შენ მიეცი ფანებს პირობა, რომ როცა გამოვა ახალი სიმღერა გაუგზავნი მათ.
// ამისათვის შენ მიეცი მათ სია, სადაც ფანებს შეუძლიათ ჩაწერონ თავიანთი მეილები, რომ მათ შეძლონ სიმღერის მიღება როგორც კი ის გამოვა.
// მეტიც, თუ შენ ვერ მოახერხე სიმღერის გამშვება, შეგიძლი შეატყობინო მათ ეს და დაუწერო მიზეზი.

// ამით შენც კმაყოფილი ხარ, რადგან ფანები არ გაწუხებენ და ისინიც, რომ არ გამოტოვებენ ახალი სიმღერის გამოსვლას

// Promise არის დაპირება, რომელიც შეეცდება შეასრულოს გადაცემული დავალება,
// მაგრამ მიუხედავად იმისა წარმატებით შესრულდება ის, თუ არა, დაგიბრუნოს პასუხი

// .fetch არის ფუქნცია, რომელიც სერვერზე აგზავნის მოთხოვნას და გვაძლევს საშუალებას წამოვიღოთ ინფორმაცია.
// ამისათვის მას არგუმენტად გადაეცემა სერვერის მისამართი(URL)
// .fetch ფუნქცია აბრუნებს Promise ობიექტს

const promise = fetch('https://jsonplaceholder.typicode.com/todos');

console.log(promise);

promise
    .then((response) => response.json())
    .then((data) => console.log(data))
    .catch((error) => console.log("Rejected:", error));

// .fetch ფუნქცია ყოველთვის აბრუნებს Promise ობიექტს, რომელიც აბრუნებს საპასუხო ობიექტს(resposne).
// მისგან შეგვიძლია მივიღოთ წვდომა სერვერიდან წამოღებულ მონაცემზე,
// მაგრამ ის იქნება JSON-ის ფორმატით(ფორმატი, რომელშიც ყველაფერი string-ის სახით, ბრჭყალებშია წარმოდგენილი.
// ის გამოიყენება ინტერნეტში კომპიუტერებს შორის ინფორმაციის სწრაფი გაცვლისთვის).
// დაგვჭირდება .json() საპასუხო ობიექტის(response) მეთოდი, რომელიც გადაიყვანს წამოღებულ მონაცემს JSON-ის ფორატიდან ჩვეულებრივში
// და დააბრუნებს მას. ამ პროცესს ჰქვია Parsing

// .json მეთოდი არის ასინქრონული, რადგან სერვერიდან წამოღებული ინფორმაცია შეიძლება იყოს დიდი და parsing-ს დასჭირდეს დრო,
// ამ პერიოდში რომ არ მოხდეს call stack-ის დაბლოკვა, ის გახადეს ასინქრონული

// .then არის Promise-ის მეთოდი, რომელიც გაეშვება მაშინ როდესაც დავალება წარმატებით შესრულდა, მას არგუმენტად გადაეცემა ფუნქცია,
// რომლის არგუმენტიც არის resolve(პირველი) ფუნქციის დაბრუნებული მნიშვნელობა

// .catch არის Promise-ის მეთოდი, რომელიც გაეშვება მაშინ როდესაც დავალება არ შესრულდა, მას არგუმენტად გადაეცემა ფუნქცია,
// რომლის არგუმენტიც არის reject(მეორე) ფუნქციის დაბრუნებული მნიშვნელობა