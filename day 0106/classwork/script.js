
// შექმენით თქვენი დაპირება, მეგობარმა თუ არ მოგიტანათ წიგნი დააბრუნეთ რეჯექტით
// რომ წიგნი ვერ მიიღეთ, ხოლო თუ პირობა შესრულდა მაგ შემთხვევაში დააბრუნეთ რომ წიგნი
// წარმატებით მიიღეთ (კომენტარებით ახსენით დეტალურად ყველაფერი) რა არის Promise, then and catch

// შევქმენი დაპირების ობიექტი კონსტრუქტორის გამოყენებით. კონსტრუქტორს გადავეცი ფუნქცია, რომელსაც არგუმენტად გადავეცი ორი ფუნქცია
// resolve-ი და reject-ი.
const promise = new Promise((resolve, reject) => {
    // შევქმენი კონსტანტა gotBook და შევინახე მასში false.
    const gotBook = false;

    // ვამოწმებ, თუ gotBook არის true, გაეშვება ფუნქცია resolve, სხვა შემთხვევაში reject
    if(gotBook) {
        resolve("I received the book successfully")
    } else {
        reject("I couldn't get the book")
    }
});

// კონსოლში გამომაქვს Promise ობიექტი
console.log(promise);

// ამოვიღე დაბრუნებული მნიშვნელობა, იმისათვის რომ გავიგო რა მდგომარეობაშია დაპირება(შესრულდა თუ არა).
// თუ დაბრუნებული მნიშვნელობა არის Fulfilled, შესრულდება .then, ხოლო თუ Rejected, შესრულდება .catch
promise
    .then((result) => console.log("Fulfilled:",result))
    .catch((error) => console.log("Rejected:",error));


// Promise არის კონსტრუქტორი, რომელიც ქმნის დაპირების ობიექტს, ხოლო ეს ობიექტი გვპირდება,
// რომ რაღაც მოქმედების შესრულებისას(მაგალითად სერვერზე მოთხოვნის გაგზავნისას) დაგვიბრუნებს პასუხს.
// Promise-ი შეიძლება იყოს სამ მდგომარეობაში:

// 1. Pending - დავალება ჯერ არ შესრულებულა(პროცესშია, არ ვიცით მისი რეზულტატი)
// 2. Fulfilled - დავალება წარმატებით შესრულდა
// 3. Rejected - დავალება არ შესრულდა

// როდესაც ვქმნით Promis ობიექტს, მის კონსტრუქტორს გადავცემთ ფუნქციას, ამ ფუნქციას კი, გადაეცემა ორი ფუნქცია.
// პირველი უნდა გაეშვას იმ შემთხვევაში, თუ დავალება წარმატებით შესრულდა, სხვა შემთხვევაში, მეორე.

// .then არის Promise-ის მეთოდი, რომელიც გაეშვება მაშინ როდესაც დავალება წარმატებით შესრულდა, მას არგუმენტად გადაეცემა ფუნქცია,
// რომლის არგუმენტიც არის resolve(პირველი) ფუნქციის დაბრუნებული მნიშვნელობა

// .catch არის Promise-ის მეთოდი, რომელიც გაეშვება მაშინ როდესაც დავალება არ შესრულდა, მას არგუმენტად გადაეცემა ფუნქცია,
// რომლის არგუმენტიც არის reject(მეორე) ფუნქციის დაბრუნებული მნიშვნელობა